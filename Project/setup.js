#!/usr/bin/env node

/**
 * Interactive Setup Script for PerplexitySceneCapture
 * This script helps you configure the application with your API keys
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('\nüöÄ PerplexitySceneCapture Setup Wizard\n');
console.log('This script will help you configure your API keys securely.\n');

async function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function setupClient() {
  console.log('üì± Client Configuration (React Native App)\n');
  
  const perplexityKey = await question('Enter your new Perplexity API key (starts with pplx-): ');
  
  if (!perplexityKey.startsWith('pplx-')) {
    console.log('‚ö†Ô∏è  Warning: Perplexity API key should start with "pplx-"');
  }
  
  const clientEnv = `# Client Environment Variables
# Generated by setup script

# Perplexity AI API Key
EXPO_PUBLIC_PERPLEXITY_API_KEY=${perplexityKey}

# API Configuration
EXPO_PUBLIC_API_URL=https://api.perplexity.ai/chat/completions

# Development Settings
EXPO_PUBLIC_DEBUG_MODE=true
`;

  const clientEnvPath = path.join(__dirname, 'client', '.env');
  fs.writeFileSync(clientEnvPath, clientEnv);
  console.log('‚úÖ Client .env file created successfully\n');
}

async function setupServer() {
  console.log('üñ•Ô∏è  Server Configuration (OCI Speech Service)\n');
  
  const userOcid = await question('Enter your new OCI User OCID: ');
  const tenancyOcid = await question('Enter your new OCI Tenancy OCID: ');
  const fingerprint = await question('Enter your new API key fingerprint: ');
  const region = await question('Enter your OCI region (default: eu-amsterdam-1): ') || 'eu-amsterdam-1';
  const keyPath = await question('Enter path to your private key file (relative to server/): ') || 'config/private_key.pem';
  
  const serverEnv = `# Server Environment Variables
# Generated by setup script

# OCI Configuration
OCI_USER_OCID=${userOcid}
OCI_TENANCY_OCID=${tenancyOcid}
OCI_FINGERPRINT=${fingerprint}
OCI_REGION=${region}
OCI_PRIVATE_KEY_PATH=${keyPath}

# Server Configuration
NODE_ENV=development
PORT=8450
`;

  const serverEnvPath = path.join(__dirname, 'server', '.env');
  fs.writeFileSync(serverEnvPath, serverEnv);
  console.log('‚úÖ Server .env file created successfully\n');
}

async function main() {
  try {
    console.log('Setting up environment files...\n');
    
    await setupClient();
    await setupServer();
    
    console.log('üéâ Setup Complete!\n');
    console.log('Next steps:');
    console.log('1. Place your OCI private key file in the server/config/ directory');
    console.log('2. Run: cd client && npm install');
    console.log('3. Run: cd server && npm install');
    console.log('4. Start the server: cd server && npm run dev');
    console.log('5. Start the client: cd client && npm start\n');
    console.log('üìñ For detailed instructions, see SECURITY_SETUP.md\n');
    
  } catch (error) {
    console.error('‚ùå Setup failed:', error.message);
  } finally {
    rl.close();
  }
}

main();
